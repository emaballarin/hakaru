## Supervised Naive Bayes
def dirichlet(as array(prob)):
  xs <~ plate i of int2nat(size(as)-1):
    beta(summate j from i+1 to size(as): as[j], as[i])
  return array i of size(as):
    x = product j from 0 to i: xs[j]
    x * if i+1==size(as): 1 else: real2prob(1-xs[i])

def naive_bayes( topic_prior array(prob)
  , word_prior array(prob)
  , z array(nat)
  , w array(nat)
  , doc array(nat)
  , query array(nat) ):

    # priors
    theta <~ dirichlet(topic_prior)   # topic prevalence
    phi   <~ plate k of size(topic_prior):
      dirichlet(word_prior) # word dist for topic k

    # likelihood
    
    z <~ plate i of size(z):
      observe categorical(theta) z[i]

    w <~ plate n of size(w):   # word n
      observe categorical(phi[z[doc[n]]]) w[n]

    # predictive distribution

    zNew <~ categorical(theta)

    q <~ plate n of size(query):
      observe categorical(phi[zNew]) query[n]


    return zNew

naive_bayes
